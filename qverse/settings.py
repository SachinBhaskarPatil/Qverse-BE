"""
Django settings for qverse project.

Generated by 'django-admin startproject' using Django 3.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
from datetime import timedelta
from pathlib import Path
from utils.operators import Bool
import os
from corsheaders.defaults import default_headers
import dotenv
import user
import firebase_admin
from firebase_admin import credentials
dotenv.load_dotenv()

ENV = os.getenv('env', 'Dev')
DEBUG = Bool(os.getenv('DEBUG', False))


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '41fd194866a77a5c7de4e804538614454214c0106960c532451dcb5937a1f5a5bdcb4a4cdf3ea9f5e7f405140cf0d2b1a0ef01e6fa5eb09b702a0de75ac9913e'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

CELERY_BROKER_URL=f"{os.getenv('REDIS_PROTOCOL_CELERY', 'rediss')}://{os.getenv('REDIS_CELERY_HOST', 'localhost')}:6379/1"
CELERY_TIMEZONE = 'Asia/Kolkata'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',

    'user',
    'game_interface',
    'generator',
    'gametester',
    'rest_framework',
    'rest_framework_simplejwt',
]

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'frontend/static'),
]

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',

]


REST_FRAMEWORK = {
     'DEFAULT_AUTHENTICATION_CLASSES': (
        'utils.authenticate.CustomAuthentication',
    ),
}


CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://qverse.life",
    "http://zo.live",
    "https://qverse.life",
    "https://zo.live",
]

CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^https://\w+\.qverse\.life$",
    r"^https://\w+\.zo\.live$",
]

CSRF_TRUSTED_ORIGINS = [
    'https://*.qverse.life',
    'https://*.127.0.0.1',
    'https://*.zo.live',
    'http://127.0.0.1'  # Corrected entry
]


ALLOWED_HOSTS = ['*']

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_HEADERS = list(default_headers) + [
    "credentials",
    "platform",
    "api-key",
    "api_key"
]

ROOT_URLCONF = 'qverse.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'qverse.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DB_READER = 'reader'
DB_WRITER = 'default'   

DATABASES = {
    DB_WRITER: {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST_WRITER'),
        'PORT': os.getenv('DB_PORT'),
    },
    DB_READER: {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST_READER'),
        'PORT': os.getenv('DB_PORT'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

OPEN_AI_API_KEY = ''

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=14),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
    'AUTH_COOKIE': 'access_token',  # This should be correctly defined here
    'AUTH_COOKIE_REFRESH': 'refresh_token',
    'AUTH_COOKIE_DOMAIN': None,
    'AUTH_COOKIE_SECURE': False,
    'AUTH_COOKIE_HTTP_ONLY': True,
    'AUTH_COOKIE_PATH': '/',
    'AUTH_COOKIE_SAMESITE': 'Lax',
}

GOOGLE_OAUTH2_CLIENT_ID = '235206262328-1u60s1t1uj57m0v79jkfkqtv13kqlrb9.apps.googleusercontent.com'


# AWS
AWS_ACCESS_KEY_ID     = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_REGION            = os.getenv('AWS_REGION')
AUTH_USER_MODEL       = "user.User" 
AWS_COGNITO_CLIENT_ID = os.getenv('AWS_COGNITO_CLIENT_ID')
OPEN_AI_API_KEY       = os.getenv('OPEN_AI_API_KEY')
CLAUDE_API_KEY        = os.getenv('CLAUDE_API_KEY')
ELEVEN_LABS_API_KEY   = os.getenv('ELEVEN_LABS_API_KEY')
FRONTEND_URL          = os.getenv('FRONTEND_URL')

firebase_cred_path = os.path.join(BASE_DIR, "credentials/firebase-credentials.json")
cred = credentials.Certificate(firebase_cred_path)
firebase_admin.initialize_app(cred, {
    'databaseURL': os.getenv("CHAT_FIREBASE_REALTIME_DB_URL")
})

